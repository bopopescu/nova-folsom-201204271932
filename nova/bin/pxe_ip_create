#!/usr/bin/env python

# Copyright (c) 2012 NTT DOCOMO, INC. 
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

""" start add by NTT DOCOMO """

import os
import sys
import getopt

POSSIBLE_TOPDIR = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(POSSIBLE_TOPDIR, 'nova', '__init__.py')):
    sys.path.insert(0, POSSIBLE_TOPDIR)

from nova import context
from nova import db
from nova.virt.baremetal import bmdb
from nova import flags
from nova import utils
from nova import log as logging

FLAGS = flags.FLAGS


def main():
    opts, args = getopt.getopt(
             sys.argv[1:],
             "",
             [ 
                 'flagfile=',
                 'address=',
                 'server_address=',
                 'service_host=',
             ] )

    flagfile = '/etc/nova/nova.conf'
    address = None
    server_address = None
    service_host = None

    for o, a in opts:
        if o == "--address":
            address = a
        if o == "--server_address":
            server_address = a
        if o == "--service_host":
            service_host = a
        if o == "--flagfile":
            flagfile = a

    if not address:
        print "address is None"
        sys.exit(1)
    if not server_address:
        print "server_address is None"
        sys.exit(1)
    if not service_host:
        print "service_host is None"
        sys.exit(1)

    args = sys.argv[:1] + args
    utils.default_flagfile(filename=flagfile, args=args)
    argv = FLAGS(args)

    ctx = context.get_admin_context()

    service = db.service_get_by_host_and_topic(ctx, service_host, "compute")
    if not service:
        print "a service whose host is '%s' is not found" % service_host
        sys.exit(1)
    service_id = service["id"]
   
    id = bmdb.phy_pxe_ip_create(ctx, address, server_address, service_id)
    print "id=%s" % id
    ip_ref = bmdb.phy_pxe_ip_get(ctx, id)
    print "address=%s" % ip_ref.address
    print "server_address=%s" % ip_ref.server_address


if __name__ == "__main__":
    main()

""" end add by NTT DOCOMO """

