#!/usr/bin/env python

# Copyright (c) 2012 NTT DOCOMO, INC. 
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

""" start add by DOCOMO """

import eventlet
eventlet.monkey_patch()

import os
import sys
import subprocess
import threading
import time

# If ../nova/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'nova', '__init__.py')):
    sys.path.insert(0, possible_topdir)

import datetime, cgi, StringIO
import Queue
from wsgiref import util, simple_server
from xml.sax import saxutils


from nova.openstack.common import cfg
from nova import context as nova_context
from nova import db
from nova.virt.baremetal import bmdb
from nova import flags
from nova import log as logging
from nova import utils


deploy_server_opts = [
    cfg.StrOpt('physical_deploy_work',
               default='phy_deploy_work'),
]

FLAGS = flags.FLAGS
FLAGS.register_opts(deploy_server_opts)

utils.default_flagfile()
flags.FLAGS(sys.argv)
logging.setup()

LOG = logging.getLogger('nova.phy.deploy')

QUEUE = Queue.Queue()

def get_deployment(context, id):
    return bmdb.phy_deployment_get(context, id)


def delete_deployment(context, id):
    return bmdb.phy_deployment_destroy(context, id)


def run_work(address, port, iqn, lun, image_path, pxe_config_path, root_mb, swap_mb):
    cmd = [FLAGS.physical_deploy_work,
           address,
           str(port),
           iqn,
           str(lun),
           image_path,
           pxe_config_path,
           str(root_mb),
           str(swap_mb),
          ]
    LOG.info(cmd)
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    LOG.info("pid: %d" % p.pid)
    out,err = p.communicate()
    LOG.info("returncode: %d" % p.returncode)
    LOG.info("out: %s" % out)
    LOG.info("err: %s" % err)


class Worker(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        self.setDaemon(True)

    def run(self):
        while True:
            params = QUEUE.get()
            LOG.info("new work: %s", params)
            time.sleep(5)
            run_work(**params)

class PhyDeploy(object):

    def __init__(self):
        pass

    def __call__(self, environ, start_response):
        method = environ['REQUEST_METHOD']
        if method == 'POST':
            return self.post(environ, start_response)
        else:
            start_response('501 Not Implemented', [('Content-type', 'text/plain')])
            return 'Not Implemented'

    def post(self, environ, start_response):
        LOG.info("post: environ=%s", environ)
        inpt = environ['wsgi.input']
        length = int(environ.get('CONTENT_LENGTH', 0))

        x = inpt.read(length)
        q = dict(cgi.parse_qsl(x))
        deployment_id = q['i']
        deployment_key = q['k']
        address = q['a']
        port = '3260'
        iqn = q['n']
        lun = '1'

        context = nova_context.get_admin_context()
        d = get_deployment(context, deployment_id)
        if d['key'] == deployment_key:
            image_path = d['image_path']
            pxe_config_path = d['pxe_config_path']
            root_mb = d['root_mb']
            swap_mb = d['swap_mb']
            params = { 'address': address,
                       'port': port,
                       'iqn': iqn,
                       'lun': lun,
                       'image_path': image_path,
                       'pxe_config_path': pxe_config_path,
                       'root_mb': root_mb,
                       'swap_mb': swap_mb,
                     }
            QUEUE.put(params)
            delete_deployment(context, deployment_id)
        start_response('200 OK', [('Content-type', 'text/plain')])
        return ''


from wsgiref import simple_server

app = PhyDeploy()


if __name__ == '__main__':
    Worker().start()

    srv = simple_server.make_server('', 10000, app)
    srv.serve_forever()
 
""" end add by DOCOMO """
