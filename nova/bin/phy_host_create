#!/usr/bin/env python

# Copyright (c) 2012 NTT DOCOMO, INC. 
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

""" start add by NTT DOCOMO """

import sys
import getopt
import os

POSSIBLE_TOPDIR = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(POSSIBLE_TOPDIR, 'nova', '__init__.py')):
    sys.path.insert(0, POSSIBLE_TOPDIR)

from nova import context
from nova import db
from nova.virt.baremetal import bmdb
from nova import flags
from nova import utils
from nova import log as logging

FLAGS = flags.FLAGS

def main():
    usage = """
usage:
            --service_host=<compute service's hostname> | --service_id=<compute service's ID>
            --cpus=<cpu count>
            --memory_mb=<memory size in MB>
            --local_gb=<disk size in GB>
            --ipmi_address=<IPMI address>
            --ipmi_user=<IPMI username>
            --ipmi_password=<IPMI password>
            --terminal_port=<TCP port for terminal access>
            --pxe_mac_address=<xx:xx:xx:xx:xx:xx>
            --pxe_vlan_id=<VLAN ID> (optional)
            """
    opts, args = getopt.getopt(
        sys.argv[1:],
        "",
        [ 'flagfile=',
          'service_id=',
          'service_host=',
          'cpus=',
          'memory_mb=',
          'local_gb=',
          'ipmi_address=',
          'ipmi_user=',
          'ipmi_password=',
          'pxe_mac_address=',
          'pxe_vlan_id=',
          'terminal_port=',
        ])

    values = {
        'service_id': None,
        'cpus': None,
        'memory_mb': None,
        'local_gb': None,
        'ipmi_address': None,
        'ipmi_user': None,
        'ipmi_password': None,
        'pxe_mac_address': None,
        'pxe_vlan_id': None,
        'registration_status': 'done',
        'task_state' : None,
        'terminal_port': None,
    }

    args = sys.argv[:1] + args
    utils.default_flagfile(filename='/etc/nova/nova.conf', args=args)
    argv = FLAGS(args)
    #logging.setup()
    ctx = context.get_admin_context()

    for o, a in opts:
        if o == '--service_id':
            values['service_id'] = a
        elif o == '--service_host':
            service_ref = db.service_get_by_host_and_topic(ctx, a, 'compute')
            if service_ref is None:
                print "compute service that is host == '%s' is not found" % a
                sys.exit(1)
            values['service_id'] = service_ref.id
        elif o == '--cpus':
            values['cpus'] = a
        elif o == '--memory_mb':
            values['memory_mb'] = a
        elif o == '--local_gb':
            values['local_gb'] = a
        elif o == '--ipmi_address':
            values['ipmi_address'] = a
        elif o == '--ipmi_user':
            values['ipmi_user'] = a
        elif o == '--ipmi_password':
            values['ipmi_password'] = a
        elif o == '--pxe_mac_address':
            values['pxe_mac_address'] = a
        elif o == '--pxe_vlan_id':
            values['pxe_vlan_id'] = a
        elif o == '--terminal_port':
            values['terminal_port'] = a
        elif o == '--flagfile':
            pass
        else:
            print "unrecognized option '%s'" % o
            print usage
            sys.exit(1)

    print values

    ok = True

    for k,v in values.items():
        if v is None and k != 'task_state' and k != 'pxe_vlan_id':
            print "'%s' is not specified" % k
            ok = False

    if not ok:
        print usage
        sys.exit(1)

    r = bmdb.phy_host_create(ctx, values)
    print r.id

if __name__ == "__main__":
    main()

""" end add by NTT DOCOMO """

